{"version":3,"file":"rexql-client.js","sources":["../assets-src/rexql-client.js"],"sourcesContent":["/**\n * rexQL JavaScript Client für Public Headless CMS\n *\n * Entwickelt für öffentliche React/Vue/Angular Apps ohne Benutzerauthentifizierung.\n * Sicherheit durch Domain-/IP-Beschränkungen und CORS anstatt Benutzer-Sessions.\n *\n * Setup:\n * 1. Erstellen Sie einen domain-beschränkten API-Schlüssel im REDAXO Backend\n * 2. Konfigurieren Sie CORS für Ihre Frontend-Domain(s)\n * 3. Verwenden Sie diesen Client in Ihrer öffentlichen App\n *\n * Optionale Authentifizierung ist verfügbar für sensible Daten, aber nicht erforderlich.\n */\n\nclass RexQLClient {\n  constructor(options = {}) {\n    this.baseUrl = options.baseUrl || ''\n    this.apiKey = options.apiKey // Haupt-API-Key für Public Headless CMS\n    this.publicKey = options.publicKey // Public Key für optional Auth-Proxy-Modus\n    this.sessionToken = options.sessionToken\n    this.useProxy = options.useProxy || false // Standard: direkte API-Nutzung\n    this.enableAuth = options.enableAuth || false // Standard: keine Authentifizierung\n  }\n\n  /**\n   * GraphQL Query ausführen\n   *\n   * Für Public Headless CMS wird standardmäßig der direkte API-Zugriff\n   * mit Domain-/IP-Beschränkungen und CORS verwendet.\n   */\n  async query(query, variables = null, operationName = null) {\n    const endpoint = this.useProxy\n      ? `${this.baseUrl}/index.php?rex-api-call=rexql_proxy`\n      : `${this.baseUrl}/index.php?rex-api-call=rexql_graphql`\n\n    const headers = {\n      'Content-Type': 'application/json'\n    }\n\n    if (this.useProxy && this.enableAuth) {\n      // Proxy-Modus mit Authentifizierung (für sensible Daten)\n      if (this.sessionToken) {\n        headers['Authorization'] = `Bearer ${this.sessionToken}`\n      }\n      if (this.publicKey) {\n        headers['X-Public-Key'] = this.publicKey\n      }\n    } else {\n      // Direkter Modus (Standard für Public Headless CMS)\n      if (this.apiKey) {\n        headers['X-API-KEY'] = this.apiKey\n      }\n    }\n\n    const body = {\n      query,\n      variables,\n      operationName\n    }\n\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(body),\n        // CORS credentials nur bei Auth-Proxy erforderlich\n        credentials: this.useProxy && this.enableAuth ? 'include' : 'omit'\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n      }\n\n      const result = await response.json()\n\n      if (result.errors && result.errors.length > 0) {\n        throw new Error(result.errors[0].message)\n      }\n\n      return result\n    } catch (error) {\n      console.error('RexQL Query Error:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Session Token setzen (für optionale Authentifizierung)\n   */\n  setSessionToken(token) {\n    this.sessionToken = token\n  }\n\n  /**\n   * Login und Session Token erhalten\n   */\n  async login(username, password) {\n    const response = await fetch(\n      `${this.baseUrl}/index.php?rex-api-call=rexql_auth&action=login`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          username: username,\n          password: password\n        })\n      }\n    )\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n    }\n\n    const result = await response.json()\n\n    if (!result.success) {\n      throw new Error(result.error || 'Login failed')\n    }\n\n    // Session Token speichern\n    this.sessionToken = result.session_token\n\n    // Optional: In localStorage speichern für persistente Sessions\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('rexql_session_token', this.sessionToken)\n    }\n\n    return result\n  }\n\n  /**\n   * Session Token validieren\n   */\n  async validateSession() {\n    if (!this.sessionToken) {\n      // Versuche Token aus localStorage zu laden\n      if (typeof localStorage !== 'undefined') {\n        this.sessionToken = localStorage.getItem('rexql_session_token')\n      }\n    }\n\n    if (!this.sessionToken) {\n      throw new Error('No session token available')\n    }\n\n    const response = await fetch(\n      `${this.baseUrl}/index.php?rex-api-call=rexql_auth&action=validate`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          token: this.sessionToken\n        })\n      }\n    )\n\n    const result = await response.json()\n\n    if (!result.success) {\n      // Token ungültig - löschen\n      this.sessionToken = null\n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem('rexql_session_token')\n      }\n      throw new Error(result.error || 'Session validation failed')\n    }\n\n    return result\n  }\n\n  /**\n   * Logout\n   */\n  async logout() {\n    if (this.sessionToken) {\n      try {\n        await fetch(\n          `${this.baseUrl}/index.php?rex-api-call=rexql_auth&action=logout`,\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: new URLSearchParams({\n              token: this.sessionToken\n            })\n          }\n        )\n      } catch (e) {\n        console.warn('Logout request failed:', e)\n      }\n    }\n\n    // Token lokal löschen\n    this.sessionToken = null\n    if (typeof localStorage !== 'undefined') {\n      localStorage.removeItem('rexql_session_token')\n    }\n  }\n\n  /**\n   * Artikel abfragen (Beispiel)\n   */\n  async getArticles(limit = 10, clangId = 1) {\n    return this.query(`\n            {\n                rexArticleList(limit: ${limit}, clang_id: ${clangId}) {\n                    id\n                    name\n                    createdate\n                    status\n                }\n            }\n        `)\n  }\n\n  /**\n   * Einzelnen Artikel abfragen (Beispiel)\n   */\n  async getArticle(id) {\n    return this.query(`\n            {\n                rexArticle(id: ${id}) {\n                    id\n                    name\n                    createdate\n                    status\n                    slices: rexArticleSliceList {\n                        id\n                        module_id\n                        value1\n                        value2\n                    }\n                }\n            }\n        `)\n  }\n\n  /**\n   * Medien abfragen (Beispiel)\n   */\n  async getMedia(limit = 20) {\n    return this.query(`\n            {\n                rexMediaList(limit: ${limit}) {\n                    id\n                    filename\n                    title\n                    category_id\n                    filesize\n                }\n            }\n        `)\n  }\n}\n\n// Verwendungsbeispiele:\n\n// 1. Public Headless CMS (empfohlen für öffentliche React/Vue/Angular Apps)\nconst cmsClient = new RexQLClient({\n  baseUrl: 'https://cms.ihre-domain.de',\n  apiKey: 'rexql_abc123...', // Domain-beschränkter API Key\n  useProxy: false, // Direkter API-Zugriff\n  enableAuth: false // Keine Benutzer-Authentifizierung\n})\n\n// 2. Dev-Modus (ohne API Key in Development, falls isSecure=false im project addon)\nconst devClient = new RexQLClient({\n  baseUrl: 'http://redaxo-graph-ql.test',\n  // apiKey nicht erforderlich in dev mode\n  useProxy: false,\n  enableAuth: false\n})\n\n// 3. Optionale Authentifizierung für sensible Daten (Proxy-Modus)\nconst authClient = new RexQLClient({\n  baseUrl: 'https://cms.ihre-domain.de',\n  publicKey: 'rexql_pub_abc123...',\n  useProxy: true,\n  enableAuth: true\n})\n\n// ==========================================\n// REACT USAGE EXAMPLE für Public Headless CMS\n// ==========================================\n\n/*\n// 1. Setup des rexQL Clients\nimport { useState, useEffect } from 'react';\n\nconst cmsClient = new RexQLClient({\n  baseUrl: 'http://redaxo-graph-ql.test',\n  apiKey: 'rexql_abc123...', // Domain-beschränkter API Key\n  useProxy: false,\n  enableAuth: false\n});\n\n// 2. React Hook für Artikel\nfunction useArticles(limit = 10) {\n  const [articles, setArticles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function loadArticles() {\n      try {\n        setLoading(true);\n        setError(null);\n        const result = await cmsClient.getArticles(limit);\n        setArticles(result.data.rexArticleList);\n      } catch (err) {\n        setError(err.message);\n        console.error('Failed to load articles:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    loadArticles();\n  }, [limit]);\n\n  return { articles, loading, error };\n}\n\n// 3. React Component\nfunction ArticleList() {\n  const { articles, loading, error } = useArticles(10);\n\n  if (loading) return <div>Loading articles...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"articles\">\n      <h2>Latest Articles</h2>\n      {articles.map(article => (\n        <article key={article.id} className=\"article-card\">\n          <h3>{article.name}</h3>\n          <time>{new Date(article.createdate).toLocaleDateString()}</time>\n          <p>Status: {article.status === '1' ? 'Published' : 'Draft'}</p>\n        </article>\n      ))}\n    </div>\n  );\n}\n\n// 4. Einzelner Artikel mit Navigation\nfunction ArticleDetail({ articleId }) {\n  const [article, setArticle] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function loadArticle() {\n      try {\n        const result = await cmsClient.getArticle(articleId);\n        setArticle(result.data.rexArticle);\n      } catch (err) {\n        console.error('Failed to load article:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    if (articleId) {\n      loadArticle();\n    }\n  }, [articleId]);\n\n  if (loading) return <div>Loading...</div>;\n  if (!article) return <div>Article not found</div>;\n\n  return (\n    <article>\n      <h1>{article.name}</h1>\n      <time>{new Date(article.createdate).toLocaleDateString()}</time>\n      \n      {article.slices && article.slices.map(slice => (\n        <div key={slice.id} className=\"content-slice\">\n          <div dangerouslySetInnerHTML={{ __html: slice.value1 }} />\n        </div>\n      ))}\n    </article>\n  );\n}\n\n// 5. Custom GraphQL Query Hook\nfunction useCustomQuery(query, variables = {}) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function executeQuery() {\n      try {\n        setLoading(true);\n        setError(null);\n        const result = await cmsClient.query(query, variables);\n        setData(result.data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    if (query) {\n      executeQuery();\n    }\n  }, [query, JSON.stringify(variables)]);\n\n  return { data, loading, error };\n}\n\n// Verwendung:\n// const { data, loading, error } = useCustomQuery(`\n//   {\n//     rexArticleList(limit: 5, status: 1) {\n//       id\n//       name\n//       createdate\n//     }\n//   }\n// `);\n*/\n\n// ==========================================\n// VANILLA JAVASCRIPT BEISPIEL\n// ==========================================\n\n// ==========================================\n// VANILLA JAVASCRIPT BEISPIEL\n// ==========================================\n\n/*\n// Basic Setup\nconst cmsClient = new RexQLClient({\n  baseUrl: 'https://cms.ihre-domain.de',\n  apiKey: 'rexql_abc123...'\n});\n\n// Load articles on page load\nasync function loadArticles() {\n  try {\n    const result = await cmsClient.getArticles(5);\n    const articles = result.data.rexArticleList;\n    \n    const container = document.getElementById('articles');\n    container.innerHTML = articles.map(article => `\n      <article class=\"article-card\">\n        <h3>${article.name}</h3>\n        <time>${new Date(article.createdate).toLocaleDateString()}</time>\n      </article>\n    `).join('');\n    \n  } catch (error) {\n    console.error('Failed to load articles:', error);\n    document.getElementById('articles').innerHTML = \n      '<p>Error loading articles: ' + error.message + '</p>';\n  }\n}\n\n// Event Listener\ndocument.addEventListener('DOMContentLoaded', loadArticles);\n\n// Dynamic loading with button\ndocument.getElementById('load-more').addEventListener('click', async () => {\n  try {\n    const result = await cmsClient.query(`\n      {\n        rexArticleList(limit: 10, offset: 5) {\n          id\n          name\n          createdate\n          status\n        }\n      }\n    `);\n    \n    // Process results...\n    console.log('More articles:', result.data.rexArticleList);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n});\n*/\n\n// Export für Module\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = RexQLClient\n}\n\n// Global für Browser\nif (typeof window !== 'undefined') {\n  window.RexQLClient = RexQLClient\n}\n"],"names":["require_rexql_client","__commonJSMin","exports","module","RexQLClient","options","query","variables","operationName","endpoint","headers","body","response","result","error","token","username","password","limit","clangId","id"],"mappings":"8DAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAcA,MAAMC,CAAY,CAChB,YAAYC,EAAU,GAAI,CACxB,KAAK,QAAUA,EAAQ,SAAW,GAClC,KAAK,OAASA,EAAQ,OACtB,KAAK,UAAYA,EAAQ,UACzB,KAAK,aAAeA,EAAQ,aAC5B,KAAK,SAAWA,EAAQ,UAAY,GACpC,KAAK,WAAaA,EAAQ,YAAc,EAC5C,CAQE,MAAM,MAAMC,EAAOC,EAAY,KAAMC,EAAgB,KAAM,CACzD,MAAMC,EAAW,KAAK,SAClB,GAAG,YAAK,QAAO,uCACf,GAAG,YAAK,QAAO,yCAEbC,EAAU,CACd,eAAgB,kBACtB,EAEQ,KAAK,UAAY,KAAK,YAEpB,KAAK,eACPA,EAAQ,cAAmB,UAAU,YAAK,eAExC,KAAK,YACPA,EAAQ,cAAc,EAAI,KAAK,YAI7B,KAAK,SACPA,EAAQ,WAAW,EAAI,KAAK,QAIhC,MAAMC,EAAO,CACX,MAAAL,EACA,UAAAC,EACA,cAAAC,CACN,EAEI,GAAI,CACF,MAAMI,EAAW,MAAM,MAAMH,EAAU,CACrC,OAAQ,OACR,QAAAC,EACA,KAAM,KAAK,UAAUC,CAAI,EAEzB,YAAa,KAAK,UAAY,KAAK,WAAa,UAAY,MACpE,CAAO,EAED,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMC,EAAS,MAAMD,EAAS,KAAI,EAElC,GAAIC,EAAO,QAAUA,EAAO,OAAO,OAAS,EAC1C,MAAM,IAAI,MAAMA,EAAO,OAAO,CAAC,EAAE,OAAO,EAG1C,OAAOA,CACb,OAAaC,EAAO,CACd,cAAQ,MAAM,qBAAsBA,CAAK,EACnCA,CACZ,CACA,CAKE,gBAAgBC,EAAO,CACrB,KAAK,aAAeA,CACxB,CAKE,MAAM,MAAMC,EAAUC,EAAU,CAC9B,MAAML,EAAW,MAAM,MACrB,GAAG,YAAK,QAAO,mDACf,CACE,OAAQ,OACR,QAAS,CACP,eAAgB,mCAC1B,EACQ,KAAM,IAAI,gBAAgB,CACxB,SAAUI,EACV,SAAUC,CACpB,CAAS,CACT,CACA,EAEI,GAAI,CAACL,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQ,OAAAA,EAAS,OAAM,MAAK,OAAAA,EAAS,WAAY,EAGnE,MAAMC,EAAS,MAAMD,EAAS,KAAI,EAElC,GAAI,CAACC,EAAO,QACV,MAAM,IAAI,MAAMA,EAAO,OAAS,cAAc,EAIhD,YAAK,aAAeA,EAAO,cAGvB,OAAO,cAAiB,aAC1B,aAAa,QAAQ,sBAAuB,KAAK,YAAY,EAGxDA,CACX,CAKE,MAAM,iBAAkB,CAQtB,GAPK,KAAK,cAEJ,OAAO,cAAiB,cAC1B,KAAK,aAAe,aAAa,QAAQ,qBAAqB,GAI9D,CAAC,KAAK,aACR,MAAM,IAAI,MAAM,4BAA4B,EAgB9C,MAAMA,EAAS,MAbE,MAAM,MACrB,GAAG,YAAK,QAAO,sDACf,CACE,OAAQ,OACR,QAAS,CACP,eAAgB,mCAC1B,EACQ,KAAM,IAAI,gBAAgB,CACxB,MAAO,KAAK,YACtB,CAAS,CACT,CACA,GAEkC,KAAI,EAElC,GAAI,CAACA,EAAO,QAEV,WAAK,aAAe,KAChB,OAAO,cAAiB,aAC1B,aAAa,WAAW,qBAAqB,EAEzC,IAAI,MAAMA,EAAO,OAAS,2BAA2B,EAG7D,OAAOA,CACX,CAKE,MAAM,QAAS,CACb,GAAI,KAAK,aACP,GAAI,CACF,MAAM,MACJ,GAAG,YAAK,QAAO,oDACf,CACE,OAAQ,OACR,QAAS,CACP,eAAgB,mCAC9B,EACY,KAAM,IAAI,gBAAgB,CACxB,MAAO,KAAK,YAC1B,CAAa,CACb,CACA,CACA,OAAe,EAAG,CACV,QAAQ,KAAK,yBAA0B,CAAC,CAChD,CAII,KAAK,aAAe,KAChB,OAAO,cAAiB,aAC1B,aAAa,WAAW,qBAAqB,CAEnD,CAKE,MAAM,YAAYK,EAAQ,GAAIC,EAAU,EAAG,CACzC,OAAO,KAAK,MAAM,0DAEkB,OAAAD,EAAK,gBAAe,OAAAC,EAAO,gKAO1D,CACT,CAKE,MAAM,WAAWC,EAAI,CACnB,OAAO,KAAK,MAAM,mDAEW,OAAAA,EAAE,yWAa1B,CACT,CAKE,MAAM,SAASF,EAAQ,GAAI,CACzB,OAAO,KAAK,MAAM,wDAEgB,OAAAA,EAAK,kMAQlC,CACT,CACA,CAKkB,IAAId,EAAY,CAChC,QAAS,6BACT,OAAQ,kBACR,SAAU,GACV,WAAY,EACd,CAAC,EAGiB,IAAIA,EAAY,CAChC,QAAS,8BAET,SAAU,GACV,WAAY,EACd,CAAC,EAGkB,IAAIA,EAAY,CACjC,QAAS,6BACT,UAAW,sBACX,SAAU,GACV,WAAY,EACd,CAAC,EA8MG,OAAOD,GAAW,aAAeA,EAAO,UAC1CA,EAAO,QAAUC,GAIf,OAAO,QAAW,cACpB,OAAO,YAAcA"}